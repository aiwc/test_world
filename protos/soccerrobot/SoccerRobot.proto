#VRML_SIM R2019a utf8
#Author(s):         Inbae Jeong, Chansol Hong
#Maintainer:        Chansol Hong (cshong@rit.kaist.ac.kr)
# tags: static

PROTO SoccerRobot [
  # fields inherited from Robot
  field SFVec3f    translation         0 0 0
  field SFRotation rotation            0 1 0 0
  field SFVec3f    scale               1 1 1

  # fields for left and right wheels
  field SFVec3f    lwTranslation       -0.07 -0.005 0
  field SFRotation lwRotation          1 0 0 1.570796
  field SFVec3f    rwTranslation       0.07 -0.005 0
  field SFRotation rwRotation          1 0 0 1.570796

  # children
  field SFString   name                "soccer robot"
  field SFString   model               ""
  field SFString   description         ""
  field SFString   customData          ""
  # contactMaterial
  field MFNode     immersionProperties [ ]
  # boundingObject
  # physics
  field SFBool     locked              FALSE
  field SFFloat    translationStep     0.01        # m
  field SFFloat    rotationStep        0.261799387 # pi/12 rad
  field SFFloat    radarCrossSection   0.0
  field SFString   controller          "void"
  # field SFString   controllerArgs      ""
  field SFBool     synchronization     TRUE
  field MFFloat    battery             [ ]
  field SFFloat    cpuConsumption      10          # [0,inf)
  # selfCollision
  field SFBool     showWindow          FALSE
  field SFString   window              ""
  field SFString   remoteControl       ""

  # fields related to differential wheel robot
  field SFFloat    motorConsumption    0           # [0,inf)
  field SFFloat    axleLength          0.14
  field SFFloat    wheelRadius         0.04
  field SFFloat    maxSpeed            52.5          # (0,inf)
  field SFFloat    slipNoise           0.1         # [0,inf)
  field SFFloat    maxTorque           1.2         # (0,inf)

  # fields specific to SoccerRobot
  field SFFloat  height 0.09

  field SFBool   kinematic FALSE # If TRUE, Physics' are ignored

  field SFFloat  wheelThickness 0.004
  field SFFloat  wheelTireThickness 0.0

  field SFFloat  bodySize       0.15
  # field SFFloat  bodyRadius     0.0575
  field SFFloat  bodySubdivision 4
  field SFFloat  wheelVisibleRatio 0.75

  field SFFloat  weightThickness 0.01

  field SFBool   topCover   TRUE
  field SFBool   sideCover  TRUE
  field SFBool   weightPlate FALSE

  field SFFloat  distanceToFloor 0.002
  field SFFloat  distanceToPatch 0.001
  field SFFloat  distanceToWheel 0.001
  field SFNode   bodyAppearance Black { }
  field SFNode   tireAppearance Gray { }
  field SFNode   wheelAppearance Gray { }
  field SFNode bodyPhysics Physics {
    density -1
    mass 2.0
    centerOfMass [0 -0.03 0]
  }
  field SFNode wheelPhysics Physics {
    density -1
    mass 0.10
  }
  field SFNode weightPhysics Physics {
    density -1
    mass 0.0001
  }
  field SFNode supportPhysics Physics {
    density -1
    mass 0.0001
  }

  field SFString bodyContactMaterial "default"
  field SFString wheelContactMaterial "default"

  field MFNode patches [
    SoccerRobotNumberPatch { isTeamTagRed TRUE role "GK" name "number_patch" }
    SoccerRobotIDPatch { isTeamTagRed TRUE id 0 name "id_patch_red" }
    SoccerRobotIDPatch { isTeamTagRed FALSE id 0 name "id_patch_blue" }
  ]

  field MFNode cover [
    SoccerRobotCover { }
  ]
]
{
  %{
    local h  = fields.height.value
    local al = fields.axleLength.value
    local wr = fields.wheelRadius.value
    local wt = fields.wheelThickness.value
    local wtt = fields.wheelTireThickness.value
    local bs = fields.bodySubdivision.value
    local br = 0
    if bs == 4 then
      br = fields.bodySize.value / math.sqrt(2)
    else
      br = fields.bodyRadius.value
    end
    local wvr = math.min(math.max(0, fields.wheelVisibleRatio.value), 1)
    local wht = fields.weightThickness.value
    local tc = fields.topCover.value
    local sc = fields.sideCover.value
    local wp = fields.weightPlate.value
    local df = fields.distanceToFloor.value
    local dp = 2*fields.distanceToPatch.value
    local dw = fields.distanceToWheel.value

    local kinematic = fields.kinematic.value
    if (not kinematic) and (not fields.bodyPhysics.value) and (not fields.wheelPhysics.value) then
      print("kinematics mode is enabled")
      kinematic = true
    end

    local mv = fields.maxSpeed.value
    local sn = fields.slipNoise.value
  }%
  Robot {
    translation         IS translation
    rotation            IS rotation
    scale               IS scale
    children [
      DEF PATCHES Transform {
        translation 0 %{=h / 2}% 0
        rotation 0 1 0 %{=math.pi / 2}%
        children IS patches
      }
      DEF COVER Transform {
        rotation 0 1 0 %{=math.pi / 2}%
        children IS cover
      }
      DEF BODYSHAPE Transform {
        rotation 0 1 0 %{=math.pi / 2}%
        children [
          # UpperBody
          %{
          if tc then
            local ubh = (1 - wvr) * (2 * wr + dw - df) + h - 2 * wr - dw - dp
            if ubh > 0 then
          }%
          Transform {
            translation 0 %{=(h - ubh - 2 * dp) / 2}% 0
            rotation 0 1 0 %{=-math.pi / 2 + math.pi / bs}%
            children [
              Shape {
                appearance IS bodyAppearance
                geometry Cylinder {
                  height %{=ubh}%
                  radius %{=br}%
                  subdivision %{=bs}%
                }
              }
            ]
          }
          %{ end
          end }%
          %{
            local lbh = math.min(h - df - dp, wvr * (2 * wr + dw - df))
            local lbw = al - wt - 2 * dw
            if lbh > 0 and lbw > 0 then
            local plx = wr + dw
            local nlx = -plx
            local ply = lbw / 2
            local nly = -ply

            local tva = {} -- temporary vertex array
            tva[0] = {} -- x-coordinate
            tva[1] = {} -- y-coordinate
            for i = 0, (bs - 1) do
              local th = i * 2 * math.pi / bs

              tva[0][i] = br * math.cos(th + math.pi / bs)-- - math.pi /6)
              tva[1][i] = br * math.sin(th + math.pi / bs)-- - math.pi /6)
            end
            local lbs = 0
            local va = {} -- vertex array
            va[0] = {} -- x-coordinate
            va[1] = {} -- y-coordinate

            -- crossing point
            local cp = function (x, x1, y1, x2, y2) return y1 + (x - x1) * (y2 - y1) / (x2 - x1) end

            -- calculate the vertex points of the lower body shape
            for i = 0, (bs - 1) do
              local prev = i - 1
              if prev < 0 then
                prev = bs - 1
              end

              local next = i + 1
              if next > bs - 1 then
                next = 0
              end

              -- side cover (points above y-limits AND below x-limits are reorganized)
              if sc then
                -- use points that do not hide wheels
                if math.abs(tva[0][i]) > plx or math.abs(tva[1][i]) <= ply then
                  va[0][lbs] = tva[0][i]
                  va[1][lbs] = tva[1][i]
                  lbs = lbs + 1
                end

                -- reorganize points that hide wheels
                if math.abs(tva[1][i]) > ply or math.abs(tva[1][next]) > ply then
                  if tva[1][i] <= nly and tva[1][next] > nly then
                    if cp(nly, tva[1][i], tva[0][i], tva[1][next], tva[0][next]) <= plx then
                      va[0][lbs] = cp(nly, tva[1][i], tva[0][i], tva[1][next], tva[0][next])
                      va[1][lbs] = nly
                      lbs = lbs + 1
                    end
                  end
                  if tva[1][i] <= ply and tva[1][next] > ply then
                    if cp(ply, tva[1][i], tva[0][i], tva[1][next], tva[0][next]) <= plx then
                      va[0][lbs] = cp(ply, tva[1][i], tva[0][i], tva[1][next], tva[0][next])
                      va[1][lbs] = ply
                      lbs = lbs + 1
                    end
                  end
                  if tva[0][i] > plx and tva[0][next] <= plx then
                    if cp(plx, tva[0][i], tva[1][i], tva[0][next], tva[1][next]) > ply then
                      va[0][lbs] = plx
                      va[1][lbs] = cp(plx, tva[0][i], tva[1][i], tva[0][next], tva[1][next])
                      lbs = lbs + 1

                      va[0][lbs] = plx
                      va[1][lbs] = ply
                      lbs = lbs + 1
                    end
                  end
                  if tva[1][i] > ply and tva[1][next] <= ply then
                    if cp(ply, tva[1][i], tva[0][i], tva[1][next], tva[0][next]) > nlx then
                      va[0][lbs] = cp(ply, tva[1][i], tva[0][i], tva[1][next], tva[0][next])
                      va[1][lbs] = ply
                      lbs = lbs + 1
                    end
                  end
                  if tva[0][i] > nlx and tva[0][next] <= nlx then
                    if cp(nlx, tva[0][i], tva[1][i], tva[0][next], tva[1][next]) > ply then
                      va[0][lbs] = nlx
                      va[1][lbs] = ply
                      lbs = lbs + 1

                      va[0][lbs] = nlx
                      va[1][lbs] = cp(nlx, tva[0][i], tva[1][i], tva[0][next], tva[1][next])
                      lbs = lbs + 1
                    end
                  end
                  if tva[0][i] <= nlx and tva[0][next] > nlx then
                    if cp(nlx, tva[0][i], tva[1][i], tva[0][next], tva[1][next]) <= nly then
                      va[0][lbs] = nlx
                      va[1][lbs] = cp(nlx, tva[0][i], tva[1][i], tva[0][next], tva[1][next])
                      lbs = lbs + 1

                      va[0][lbs] = nlx
                      va[1][lbs] = nly
                      lbs = lbs + 1
                    end
                  end
                  if tva[1][i] > nly and tva[1][next] <= nly then
                    if cp(nly, tva[1][i], tva[0][i], tva[1][next], tva[0][next]) > nlx then
                      va[0][lbs] = cp(nly, tva[1][i], tva[0][i], tva[1][next], tva[0][next])
                      va[1][lbs] = nly
                      lbs = lbs + 1
                    end
                  end
                  if tva[0][i] <= plx and tva[0][next] > plx then
                    if cp(plx, tva[0][i], tva[1][i], tva[0][next], tva[1][next]) <= nly then
                      va[0][lbs] = plx
                      va[1][lbs] = nly
                      lbs = lbs + 1

                      va[0][lbs] = plx
                      va[1][lbs] = cp(plx, tva[0][i], tva[1][i], tva[0][next], tva[1][next])
                      lbs = lbs + 1
                    end
                  end
                end
              -- no side cover (points above y-limits are reorganized)
              else
                if tva[1][i] > ply then -- vertex out of positive y limit
                  if tva[1][prev] <= ply then -- previous vertex was within positive y limit
                    va[0][lbs] = cp(ply, tva[1][i], tva[0][i], tva[1][prev], tva[0][prev])
                    va[1][lbs] = ply
                    lbs = lbs + 1
                  end
                  if tva[1][next] <= ply then -- next vertex will be within positive y limit
                    va[0][lbs] = cp(ply, tva[1][i], tva[0][i], tva[1][next], tva[0][next])
                    va[1][lbs] = ply
                    lbs = lbs + 1
                  end
                elseif tva[1][i] <= nly then -- vertex out of negative limit
                  if tva[1][prev] > nly then -- previous vertex was within negative y limit
                    va[0][lbs] = cp(nly, tva[1][i], tva[0][i], tva[1][prev], tva[0][prev])
                    va[1][lbs] = nly
                    lbs = lbs + 1
                  end
                  if tva[1][next] > nly then -- next vertex will be within negative y limit
                    va[0][lbs] = cp(nly, tva[1][i], tva[0][i], tva[1][next], tva[0][next])
                    va[1][lbs] = nly
                    lbs = lbs + 1
                  end
                else -- vertex within limit
                  va[0][lbs] = tva[0][i]
                  va[1][lbs] = tva[1][i]
                  lbs = lbs + 1
                end
              end
            end
          }%
          # lowerBody
          Transform {
            translation 0 %{=(-h + lbh + 2 * df) / 2}% 0
            children [
              %{ if lbs > 2 then }%
              Shape {
                appearance IS bodyAppearance
                geometry IndexedFaceSet {
                  coord Coordinate {
                    point [
                      %{
                        for i = 0, (lbs - 1) do
                        local cx = va[0][i]
                        local cy = va[1][i]
                      }%

                      %{=cx}% %{=-lbh/2}% %{=cy}% # 0 : lower
                      %{=cx}% %{=lbh/2}% %{=cy}% # 1 : upper
                      %{ end }%
                    ]
                  }
                  coordIndex [
                    %{
                      local cl = function (i) return (i % lbs) * 2 + 0 end
                      local cu = function (i) return (i % lbs) * 2 + 1 end

                      for i = 0, (lbs - 1) do
                    }%
                    %{=cl(i)}%
                    %{ end }%
                    -1
                    %{ for i = 0, (lbs - 1) do }%
                    %{=cu(-i)}%
                    %{ end }%
                    -1

                    %{ for i = 0, (lbs - 1) do }%
                    %{=cl(i)}% %{=cu(i)}% %{=cu(i+1)}% %{=cl(i+1)}% -1 # outer
                    %{ end }%
                  ]
                }
              }
              %{ end }%
            ]
          }
          %{ end }%
        ]
      }
      DEF LEFTJOINT HingeJoint {
        jointParameters HingeJointParameters {
          axis -1 0 0
          anchor %{=-al / 2}% %{=(-h + 2 * wr) / 2}% 0
        }
        device [
          RotationalMotor {
            name "left wheel motor"
            consumptionFactor IS motorConsumption
            maxVelocity %{=mv*(1 + sn)}%
            maxTorque IS maxTorque
            sound ""
          }
        ]
        endPoint  DEF LEFTWHEEL Solid {
          translation IS lwTranslation
          rotation IS lwRotation
          children [
            DEF LEFT_WHEEL_SHAPE Transform {
              rotation 0 0 1 %{=math.pi / 2}%
              children [
                Shape {
                  appearance IS tireAppearance
                  geometry Cylinder {
                    height %{=wt - 0.0001}%
                    radius IS wheelRadius
                    subdivision 24
                  }
                }
                %{ if wr - wtt > 0 then }%
                Shape {
                  appearance IS wheelAppearance
                  geometry Cylinder {
                    height IS wheelThickness
                    radius %{=wr - wtt}%
                    subdivision 24
                  }
                }
                %{ end }%
              ]
            }
          ]
          name "left wheel"
          contactMaterial IS wheelContactMaterial
          physics IS wheelPhysics
          boundingObject Transform {
            rotation 0 0 1 %{=math.pi / 2}%
            children [
              Cylinder {
                height IS wheelThickness
                radius IS wheelRadius
                subdivision 24
              }
            ]
          }
        }
      }
      DEF RIGHTJOINT HingeJoint {
        jointParameters HingeJointParameters {
          axis -1 0 0
          anchor %{=al / 2}% %{=(-h + 2 * wr) / 2}% 0
        }
        device [
          RotationalMotor {
            name "right wheel motor"
            consumptionFactor IS motorConsumption
            maxVelocity %{=mv*(1 + sn)}%
            maxTorque IS maxTorque
            sound ""
          }
        ]
        endPoint  Solid {
          translation IS rwTranslation
          rotation IS rwRotation
          children [
            Transform {
              rotation 0 1 0 %{=math.pi}%
              children [
                USE LEFT_WHEEL_SHAPE
              ]
            }
          ]
          name "right wheel"
          contactMaterial IS wheelContactMaterial
          physics IS wheelPhysics
          boundingObject Transform {
            rotation 0 0 1 %{=math.pi / 2}%
            children [
              Cylinder {
                height IS wheelThickness
                radius IS wheelRadius
                subdivision 24
              }
            ]
          }
        }
      }
      DEF FRONTSUPPORT Solid {
        translation 0 %{=-h/2 + df}% %{=-(0.5*math.sqrt(2)*br - 2*df)}%
        children [
          Shape {
            appearance IS bodyAppearance
            geometry Sphere {
              radius %{=df}%
              subdivision 1
            }
          }
        ]
        name "front support"
        contactMaterial IS bodyContactMaterial
        physics IS supportPhysics
        boundingObject Sphere {
            radius %{=df}%
            subdivision 1
        }
      }
      DEF REARSUPPORT Solid {
        translation 0 %{=-h/2 + df}% %{=0.5*math.sqrt(2)*br - 2*df}%
        children [
          Shape {
            appearance IS bodyAppearance
            geometry Sphere {
              radius %{=df}%
              subdivision 1
            }
          }
        ]
        name "rear support"
        contactMaterial IS bodyContactMaterial
        physics IS supportPhysics
        boundingObject Sphere {
            radius %{=df}%
            subdivision 1
        }
      }
      %{ if wp and wht > 0 then }%
      DEF WEIGHT Solid {
        translation 0 %{=-h/2 + df + wht/2}% 0
        rotation 0 1 0 %{=math.pi / bs}%
        name "weight"
        contactMaterial IS bodyContactMaterial
        physics IS weightPhysics
        boundingObject Cylinder {
          height IS weightThickness
          radius IS bodyRadius
          subdivision %{=bs}%
        }
      }
      %{ end }%
    ]
    name                IS name
    model               IS model
    description         IS description
    customData          IS customData
    contactMaterial     IS bodyContactMaterial
    immersionProperties IS immersionProperties
    boundingObject Transform {
      translation 0 %{=df/2}% 0
      rotation 0 1 0 0
      children [
        Box {
          size %{=math.sqrt(2)*br}% %{=h - df}% %{=math.sqrt(2)*br}%
        }
      ]
    }

    physics
    %{ if not kinematic then }%
    IS bodyPhysics
    %{ else }%
    NULL
    %{ end }%

    locked              IS locked
    translationStep     IS translationStep
    rotationStep        IS rotationStep
    radarCrossSection   IS radarCrossSection
    controller          IS controller
    controllerArgs      "%{=sn}%"
    synchronization     IS synchronization
    battery             IS battery
    cpuConsumption      IS cpuConsumption
    selfCollision       FALSE
    showWindow          IS showWindow
    window              IS window
    remoteControl       IS remoteControl
  }
}
